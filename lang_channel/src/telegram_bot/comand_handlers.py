import traceback
from enum import Enum
from pathlib import Path
from typing import Callable, Optional

from pydantic import BaseModel
from telegram import Update, User

from ..config import settings
from ..google_sheets import registry
from ..preview.get_preview import get_preview
from ..schemas import FinishedPost, Post

PREVIEW_PATH = Path("../previews")
PREVIEW_PATH.mkdir(exist_ok=True)


class Pipelines(Enum):
    CREATE_POST = "/create_post"
    NEXT_3_POSTS = "/get_3_next_posts"
    NEXT_10_POSTS = "/get_10_next_posts"


class Result(BaseModel):
    success: bool = True
    response_message: Optional[str]

    class Config:
        arbitrary_types_allowed = True


class RequestProcessingFlow:
    def __init__(self, *steps: Callable):
        self.steps = steps


class UserContext:
    def __init__(self, tg_user: User, post_registry):
        self.id = tg_user.id
        self.tg_user = tg_user
        self.post_registry = post_registry

        self.steps = (
            self.check_user,
            self.get_3_last_posts,
            self.get_10_last_posts,
            self.create_post,
            self.receive_post_text,
            self.receive_audio,
            self.approve_post,
        )

        self.post = Post()
        self.last_step: Optional[Callable] = None
        self.preview_path: Optional[Path] = None

    async def process_reply(self, update: Update) -> Result:
        for step in self.steps:
            if result := await step(update):
                if result.success is True:
                    self.last_step = step
                    return result
                else:
                    self.last_step = None
                    return result
        response = "–•–º–º. –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ –Ω–æ–≤–æ–π"
        return Result(success=False, response_message=response)

    async def check_user(self, update: Update):
        user_id = str(update.message.from_user.id)
        if user_id not in settings.allowed_users:
            return Result(success=False, response_message="401: contact bot admin pls")
        return None

    async def receive_post_text(self, update: Update):
        if self.last_step != self.create_post and len(update.message.text.split("\n")) != 4:
            return None
        self.post = Post()
        try:
            ch_text, ru_text, transcription, hashtags = update.message.text.split("\n")
        except ValueError:
            return Result(
                success=False, response_message="–í—Ä–æ–¥–µ –±—ã –≤—ã –æ—Ç—Ä–∞–≤–∏–ª–∏ –Ω–µ —á–µ—Ç—ã—Ä–µ —Å—Ç—Ä–æ–∫–∏"
            )
        try:
            preview = get_preview(ch_text)
            self.preview_path = PREVIEW_PATH / f"{self.id}.jpeg"
            preview.save(self.preview_path)
        except Exception:
            traceback.print_exc()
            return Result(
                success=False, response_message="–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–µ–≤—å—é"
            )
        if not self.preview_path:
            raise ValueError()  # fix
        with open(self.preview_path, "rb") as fout:
            result = await self.tg_user.send_photo(photo=fout)
            self.post.photo = result.photo[0]
        ch_text = f"üá®üá≥ {ch_text}"
        ru_text = f"üá∑üá∫ {ru_text}"
        transcription = f"üó£ {transcription}"
        self.post.text = "\n\n".join([ch_text, ru_text, transcription, hashtags])

        return Result(
            success=True,
            response_message="–ó–∞–ø–∏—à–∏—Ç–µ –∞—É–¥–∏–æ",
        )

    async def receive_audio(self, update: Update):
        if self.last_step != self.receive_post_text:
            return None

        self.post.voice = update.message.voice
        if self.post.voice is None:
            return None

        if not self.preview_path:  # fix
            raise ValueError()
        with open(self.preview_path, "rb") as fout:
            await self.tg_user.send_photo(photo=fout, caption=self.post.text)
        await self.tg_user.send_voice(self.post.voice)
        return Result(
            success=True,
            response_message="–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å –ø–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–æ—Ä–º/–Ω–µ –Ω–æ—Ä–º",
        )

    async def approve_post(self, update: Update):
        if self.last_step != self.receive_audio:
            return None
        if update.message.text.lower() in ("–Ω–æ—Ä–º", "–¥–∞", "yes", "ÊòØ"):
            post_to_save = FinishedPost.parse_obj(self.post)
            registry.save_post(post_to_save)
            return Result(
                success=True,
                response_message="–û—Ç–ª–∏—á–Ω–æ, –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏",
            )
        if update.message.text.lower() in ("–Ω–µ—Ç", "–Ω–µ —Å–æ–≤—Å–µ–º", "no", "–Ω–µ –Ω–æ—Ä–º", "‰∏çÊòØ"):
            return Result(success=False, response_message="–¢–æ–≥–¥–∞ –¥–∞–≤–∞–π –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞")

    async def create_post(self, update: Update) -> Optional[Result]:
        command = update.message.text
        if command == Pipelines.CREATE_POST.value:
            response_message = "–û—Ç–ø—Ä–∞–≤—å —á–µ—Ç—ã—Ä–µ —Å—Ç—Ä–æ–∫–∏ –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–§—Ä–∞–∑–∞ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º.\n–§—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n–ü–∏–Ω—å–∏–Ω—å\n–•—ç—à—Ç—ç–≥–∏"
            self.post = Post()
            return Result(
                response_message=response_message, pipeline=Pipelines.CREATE_POST
            )
        return None

    async def get_3_last_posts(self, update: Update) -> Optional[Result]:
        command = update.message.text
        if command == Pipelines.NEXT_3_POSTS.value:
            await self._send_n_last_posts(3)
            return Result(response_message=None, pipeline=Pipelines.NEXT_3_POSTS)
        return None

    async def get_10_last_posts(self, update: Update) -> Optional[Result]:
        command = update.message.text
        if command == Pipelines.NEXT_10_POSTS.value:
            await self._send_n_last_posts(10)
            return Result(response_message=None, pipeline=Pipelines.NEXT_3_POSTS)
        return None

    async def _send_n_last_posts(self, n: int) -> None:
        posts = registry.get_next_posts(amount=n)
        for i, post in enumerate(posts):
            await self.tg_user.send_message(text="=" * 10 + f"–ü–æ—Å—Ç {i + 1}:" + "=" * 10)
            await self.tg_user.send_photo(photo=post.photo, caption=post.text)
            await self.tg_user.send_voice(voice=post.voice)
